# -*- coding: utf-8 -*-
"""Studi Kasus 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LAlp8wQtV-rnm4J6QvAZdIHKgNnj8pOr
"""

import random
import string
from logging import exception
from tabulate import tabulate

list_member_belanja = {} # Dictionary for list member

class Buying():
  def __init__(self, username):
    self.username = username
    if username not in list_member_belanja:
            list_member_belanja[username] = {}
            print(f"Member telah kami daftarkan dengan id {username}")
    else:
      raise Exception("Member sudah terdaftar, silahkan dilanjut")

  def Transaction(self):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=8))

  def add_transaction(self, items):
    transaction_id = self.Transaction()
    if self.username in list_member_belanja:
      list_member_belanja[self.username][transaction_id] = items
    print(f"Produk telah ditambahkan ke keranjang dengan Transaksi ID: {transaction_id}")

  def show_transaction(self, transaction_id):
    if self.username not in list_member_belanja:
        raise Exception("User tidak ditemukan")

    if transaction_id not in list_member_belanja[self.username]:
        raise Exception("Transaksi ID tidak ditemukan")

    print(f'Transaksi ID: {transaction_id}')
    headers = ['Nama Barang', 'Jumlah', 'Harga']
    print(tabulate(list_member_belanja[self.username][transaction_id], headers=headers, tablefmt="grid"))

  def update_transaction_name(self, transaction_id, items_name, new_name):
    if transaction_id not in list_member_belanja[self.username]:
        raise Exception("Transaksi ID tidak ditemukan")

    if not any(item[0] == items_name for item in list_member_belanja[self.username][transaction_id]):
      raise Exception("Produk tidak ditemukan")

    if self.username in list_member_belanja:
      for i in range(len(list_member_belanja[self.username][transaction_id])):
        if list_member_belanja[self.username][transaction_id][i][0] == items_name:
          list_member_belanja[self.username][transaction_id][i][0] = new_name
          print(f"Nama Produk telah diubah dari sebelumnya {items_name} menjadi {new_name}")
    else:
      raise Exception("Member tidak ditemukan")

  def update_transaction_quan(self, transaction_id, items_name, new_quant):
    if transaction_id not in list_member_belanja[self.username]:
        raise Exception("Transaksi ID tidak ditemukan")

    if not any(item[0] == items_name for item in list_member_belanja[self.username][transaction_id]):
      raise Exception("Produk tidak ditemukan")

    if self.username in list_member_belanja:
      for i in range(len(list_member_belanja[self.username][transaction_id])):
        if list_member_belanja[self.username][transaction_id][i][0] == items_name:
          list_member_belanja[self.username][transaction_id][i][1] = new_quant
          print(f"Jumlah Produk telah diubah menjadi {new_quant}")
    else:
      raise Exception("Member tidak ditemukan")

  def update_transaction_price(self, transaction_id, items_name, new_price):
    if transaction_id not in list_member_belanja[self.username]:
        raise Exception("Transaksi ID tidak ditemukan")

    if not any(item[0] == items_name for item in list_member_belanja[self.username][transaction_id]):
      raise Exception("Produk tidak ditemukan")

    if self.username in list_member_belanja:
      for i in range(len(list_member_belanja[self.username][transaction_id])):
        if list_member_belanja[self.username][transaction_id][i][0] == items_name:
          list_member_belanja[self.username][transaction_id][i][2] = new_price
          print(f"Harga Produk telah diubah menjadi Rp. {int(new_price):,}")
    else:
      raise Exception("Member tidak ditemukan")

  def delete_items(self, items):
    for item in list_member_belanja[self.username]:
      for transaction_id in list_member_belanja[self.username][item]:
        if transaction_id[0] == items:
          list_member_belanja[self.username][item].remove(transaction_id)
          print(f"Produk {list_member_belanja[self.username][item][0][0]} sudah dihapus")

  def reset_transaction(self):
    list_member_belanja[self.username] = {}
    print("Transaksi telah selesai dilakukan reset")

  def check_order(self):
    user_orders = list_member_belanja[self.username]

    print("+----+------------+------------+-------------+---------------+")
    print("| No | Nama Item  | Jumlah Item|  Harga/Item |  Total Harga  |")
    print("+----+------------+------------+-------------+---------------+")

    total = 0
    valid = True
    index = 1

    for order_id, items in user_orders.items():
        for item in items:
            if len(item) != 3 or not isinstance(item[1], int) or not isinstance(item[2], int):
                valid = False
                continue

            name, qty, price = item
            if not name or qty <= 0 or price <= 0:
                valid = False
                continue

            total_price = qty * price
            total += total_price
            print(f"| {index:<2} | {name:<10} | {qty:<10} | Rp {int(price):<8} | Rp {int(total_price):<10} |")
            index += 1

    print("+----+------------+------------+-------------+---------------+")

    if not valid:
        raise Exception("Terdapat Kesalahan input data")

    self.total = total

    print(f"Pemesanan sudah benar dengan nilai transaksi sebesar Rp {int(total):,} (Tanpa potongan)")

  def total_price(self):
    if self.total > 500000:
        discount = 0.10
    elif self.total > 300000:
        discount = 0.08
    elif self.total > 200000:
        discount = 0.05
    else:
        discount = 0.0

    final_price = self.total - (self.total * discount)

    print(f"Total belanja sebelum diskon: Rp {self.total:,}")
    if discount > 0:
        print(f"Diskon: {int(discount * 100)}%")
        print(f"Total setelah diskon: Rp {int(final_price):,}")
    else:
        print("Tidak ada diskon yang diterapkan.")
